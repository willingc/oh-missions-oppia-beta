default_skin: conversation_v1
param_changes: []
param_specs: {}
schema_version: 1
states:
- content:
  - type: text
    value: "<div><h1>Using Tar</h1><p>Open source software is commonly released in the form of archives called tarballs. The tar program creates, unpacks, and manipulates such archives.</p><p>When packaging a project's source code, it is customary to place the files within a directory named after the project with a version number. This makes creating and unpacking such tarballs convenient, as you only have to name one directory to tar up when creating the tarball, and people who unpack your tarball end up with a self-contained directory that they can easily remove when they are finished using the set of files you gave them.</p><p>This mission consists of two parts: unpacking tarballs and creating tarballs.</p></div>"
  name: Welcome!
  param_changes: []
  widget:
    customization_args: {}
    handlers:
    - name: submit
      rule_specs:
      - definition:
          rule_type: default
        dest: Unpack!
        feedback: []
        param_changes: []
    sticky: false
    widget_id: Continue
- content:
  - type: text
    value: "<div><h1>Unpacking tarballs</h1><p>For you to try unpacking existing tarballs, we made a simple project source archive for you, which you can download here: <a href='http://openhatch.org/missions/tar/ghello-0.4.tar.gz'>ghello-0.4.tar.gz</a>. (Note that the tarball is following convention by using a directory that holds all of the files from that tarball.)</p><p>Your mission is to to upload ghello-0.4/ghello.c.</p><p>After you extract that file, upload it here:</p></div>"
  name: Unpack!
  param_changes: []
  widget:
    customization_args: {}
    handlers:
    - name: submit
      rule_specs:
      - definition:
          inputs:
            filepath: 'learn_tar/ghello.c'
          name: MatchesBase64EncodedFile
          rule_type: atomic
          subject: answer
        dest: Pack!
        feedback:
        - Yes! You got it right.
        param_changes: []
      - definition:
          rule_type: default
        dest: Unpack!
        feedback:
        - Uh oh! That wasn't quite right. Have another go.
        param_changes: []
    sticky: false
    widget_id: FileReadInput
- content:
  - type: text
    value: "<div><h1>Creating tarballs</h1><p>Now that you know how to unpack tarballs, we made another simple project so you can experiment with creating them. It is called 'myproject' and is at version 0.1, and it consists of 2 files which you can download here:</p><p><a href='http://openhatch.org/missions/tar/downloadfile/Makefile'>Makefile</a><br /><a href='http://openhatch.org/missions/tar/downloadfile/hello.c'>hello.c</a></p><p>Your mission is to upload a compressed tarball with these files inside, all within a directory called myproject-0.1.</p><p>After you make the tarball, upload it here:</p></div>"
  name: Pack!
  param_changes: []
  widget:
    customization_args: {}
    handlers:
    - name: submit
      rule_specs:
      - definition:
          inputs: {}
          name: ChecksWrapperDirPresence
          rule_type: atomic
          subject: answer
        dest: Pack!
        feedback:
        - Wrapper directory not present.
        param_changes: []
      - definition:
          inputs:
            x: 'myproject-0.1'
          name: ChecksWrapperDirName
          rule_type: atomic
          subject: answer
        dest: Pack!
        feedback:
        - Wrapper directory name is incorrect.
        param_changes: []
      # - dest: Pack!
      #   feedback:
      #   - An unexpected file present. You can read about how to remove it <a href="/wiki/Tar_hints_for_Mac_OS_X_users">on our wiki</a>.
      #   inputs: {}
      #   name: HasAppleDoubleFile
      #   param_changes: []
      # - dest: Pack!
      #   feedback:
      #   - An unexpected file present.
      #   inputs:
      #     expected_files: ["myproject-0.1", "myproject-0.1/hello.c", "myproject-0.1/Makefile"]
      #   name: HasUnexpectedFile
      #   param_changes: []
      # - dest: Pack!
      #   feedback:
      #   - Archive does not contain all expected files
      #   inputs:
      #     expected_files: ["myproject-0.1", "myproject-0.1/hello.c", "myproject-0.1/Makefile"]
      #   name: MissingExpectedFile
      #   param_changes: []
      # - dest: Pack!
      #   feedback:
      #   - A file has incorrect contents. 
      #   inputs:
      #     file_list: ['hello.c', 'Makefile'] 
      #   name: HasUnexpectedContent
      #   param_changes: []
      - definition:
          rule_type: default
        dest: END
        feedback:
        - Yay! you did it.
        param_changes: []
    sticky: false
    widget_id: TarFileReadInput